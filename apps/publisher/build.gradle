plugins {
    id 'org.springframework.boot' version '2.0.1.RELEASE'
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id 'net.nemerosa.versioning' version '2.7-beta.1'
}

apply plugin: 'java'
apply plugin: 'jacoco'

group = 'org.github.dsauer.techstack'
version = '0.0.1-SNAPSHOT'
description = "Reactive rest service"

sourceCompatibility = 10
targetCompatibility = 10

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'org.springframework.boot', version: '2.0.1.RELEASE') {
            entry 'spring-boot-starter-webflux'
            entry 'spring-boot-starter-actuator'
            entry 'spring-boot-starter-test'
        }
        dependencySet(group: 'org.junit.jupiter', version: '5.2.0') {
            entry 'junit-jupiter-api'
            entry 'junit-jupiter-engine'
        }
    }
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-webflux')

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('io.projectreactor:reactor-test')
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

bootRun {
    if (project.hasProperty('args')) {  // -Pargs="arg1 arg2"
        args project.args.split('\\s+')   //  Apply arguments for main method
    }

    if (project.hasProperty('jmc')) {  // -Pjmc
        jvmArgs '-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8999',
                '-Dcom.sun.management.jmxremote.ssl=false',
                '-Dcom.sun.management.jmxremote.authenticate=false',
                '-XX:+UnlockCommercialFeatures',
                '-XX:+FlightRecorder',
                "-XX:FlightRecorderOptions=defaultrecording=true,dumponexit=true,dumponexitpath=$buildDir/flightRecorderResult.jfr"
    }
}

bootJar {
    launchScript()
    classifier = 'boot'
    manifest {
        attributes (
                'Implementation-Version' : project.version,
                'Implementation-Title'   : project.name,
                'Built-By'       : System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
//                'Build-Revision' : versioning.info.commit,
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}